From 4db7ab53f9c30e2e22731ace93ab6b18eef6c4ae Mon Sep 17 00:00:00 2001
From: dan <dan@noemail.net>
Date: Fri, 3 Apr 2020 11:52:59 +0000
Subject: [PATCH] Do not suppress errors when resolving references in an ORDER
 BY clause belonging to a compound SELECT within a view or trigger within
 ALTER TABLE. Fix for ticket [a10a14e9b4ba2].

FossilOrigin-Name: 684293882c302600e112cf52553c19d84fdb31663d96e5dd7f8ac17dda00a026

From c415d91007e1680e4eb17def583b202c3c83c718 Mon Sep 17 00:00:00 2001
From: drh <drh@noemail.net>
Date: Fri, 3 Apr 2020 13:19:03 +0000
Subject: [PATCH] In the event of a semantic error in an aggregate query,
 early-out the resetAccumulator() function to prevent problems due to
 incomplete or incorrect initialization of the AggInfo object. Fix for ticket
 [af4556bb5c285c08].

From fb99e388ec7f30fe43e4878236e3695ff24ae58d Mon Sep 17 00:00:00 2001
From: dan <dan@noemail.net>
Date: Fri, 3 Apr 2020 11:20:40 +0000
Subject: [PATCH] Fix a case when a pointer might be used after being freed in
 the ALTER TABLE code. Fix for [4722bdab08cb1].

FossilOrigin-Name: d09f8c3621d5f7f8c6d99d7d82bcaa8421855b3f470bea2b26c858106382b906

Upstream Patch Source: https://www3.sqlite.org/cgi/src/info/b64674919f673602
Upstream Patch Source: https://www.sqlite.org/src/info/d09f8c3621d5f7f8

diff --git a/sqlite3.c b/sqlite3.c
index 55dc686..82eb682 100644
--- a/sqlite3.c
+++ b/sqlite3.c
@@ -97942,7 +97942,7 @@ static int resolveOrderByTermToExprList(
   nc.nErr = 0;
   db = pParse->db;
   savedSuppErr = db->suppressErr;
-  db->suppressErr = 1;
+  if( IN_RENAME_OBJECT==0 ) db->suppressErr = 1;
   rc = sqlite3ResolveExprNames(&nc, pE);
   db->suppressErr = savedSuppErr;
   if( rc ) return 0;
@@ -105374,6 +105374,21 @@ static void renameWalkWith(Walker *pWalker, Select *pSelect){
   }
 }
 
+/*
+** Unmap all tokens in the IdList object passed as the second argument.
+*/
+static void unmapColumnIdlistNames(
+  Parse *pParse,
+  IdList *pIdList
+){
+  if( pIdList ){
+    int ii;
+    for(ii=0; ii<pIdList->nId; ii++){
+      sqlite3RenameTokenRemap(pParse, 0, (void*)pIdList->a[ii].zName);
+    }
+  }
+}
+
 /*
 ** Walker callback used by sqlite3RenameExprUnmap().
 */
@@ -105395,6 +105410,7 @@ static int renameUnmapSelectCb(Walker *pWalker, Select *p){
     for(i=0; i<pSrc->nSrc; i++){
       sqlite3RenameTokenRemap(pParse, 0, (void*)pSrc->a[i].zName);
       if( sqlite3WalkExpr(pWalker, pSrc->a[i].pOn) ) return WRC_Abort;
+      unmapColumnIdlistNames(pParse, pSrc->a[i].pUsing);
     }
   }
 
@@ -133217,6 +133233,7 @@ static void resetAccumulator(Parse *pParse, AggInfo *pAggInfo){
   struct AggInfo_func *pFunc;
   int nReg = pAggInfo->nFunc + pAggInfo->nColumn;
   if( nReg==0 ) return;
+  if( pParse->nErr ) return;
 #ifdef SQLITE_DEBUG
   /* Verify that all AggInfo registers are within the range specified by
   ** AggInfo.mnReg..AggInfo.mxReg */
