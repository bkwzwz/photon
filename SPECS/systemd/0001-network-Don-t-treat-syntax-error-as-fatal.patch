From da01215fa744d27d54b7a0c3f2dc9f3af8eddfad Mon Sep 17 00:00:00 2001
From: Susant Sahani <ssahani@vmware.com>
Date: Thu, 12 Mar 2020 17:35:05 +0530
Subject: [PATCH] network: Don't treat syntax error as fatal.

1. Ignore conf files when '=' not specified.
2. Fix abort when IPv6 is is enabled later stage
systemd-networkd[858]: eth0: Gained IPv6LL
systemd-networkd[858]: Assertion 'link->ndisc' failed at ../src/network/networkd-link.c:1663, function link_acquire_ipv6_conf(). Aborting.
3. Drop patch 16 sysctl-ipv6-disabled as upstream dropped it.

Change-Id: I391f8335bb637a6a5ce61327df81cd8db9a99488
---
 ...ser-be-nice-and-ignore-lines-without.patch |  41 +++
 ...er-emit-a-nicer-warning-for-somethin.patch |  32 +++
 ...-239-bz-2361840-sysctl-ipv6-disabled.patch | 247 ------------------
 SPECS/systemd/systemd-239-bz-2527177.patch    | 209 +++++++++++++++
 SPECS/systemd/systemd.spec                    |  13 +-
 5 files changed, 292 insertions(+), 250 deletions(-)
 create mode 100644 SPECS/systemd/shared-conf-parser-be-nice-and-ignore-lines-without.patch
 create mode 100644 SPECS/systemd/shared-conf-parser-emit-a-nicer-warning-for-somethin.patch
 delete mode 100644 SPECS/systemd/systemd-239-bz-2361840-sysctl-ipv6-disabled.patch
 create mode 100644 SPECS/systemd/systemd-239-bz-2527177.patch

diff --git a/SPECS/systemd/shared-conf-parser-be-nice-and-ignore-lines-without.patch b/SPECS/systemd/shared-conf-parser-be-nice-and-ignore-lines-without.patch
new file mode 100644
index 00000000..30fda2b8
--- /dev/null
+++ b/SPECS/systemd/shared-conf-parser-be-nice-and-ignore-lines-without.patch
@@ -0,0 +1,41 @@
+From 2d4fffb00bbf528683946ee04e04980549124b0a Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
+Date: Thu, 18 Jul 2019 11:28:55 +0200
+Subject: [PATCH 1/2] shared/conf-parser: be nice and ignore lines without "="
+
+We generally don't treat syntax error as fatal, but in this case we would
+completely refuse to load the file. I think we should treat the the same
+as assignment outside of a section, or an unknown key name.
+---
+ src/shared/conf-parser.c | 8 +++-----
+ 1 file changed, 3 insertions(+), 5 deletions(-)
+
+diff --git a/src/shared/conf-parser.c b/src/shared/conf-parser.c
+index 62fc1c97b7..c3af230870 100644
+--- a/src/shared/conf-parser.c
++++ b/src/shared/conf-parser.c
+@@ -239,7 +239,6 @@ static int parse_line(
+         }
+ 
+         if (sections && !*section) {
+-
+                 if (!(flags & CONFIG_PARSE_RELAXED) && !*section_ignored)
+                         log_syntax(unit, LOG_WARNING, filename, line, 0, "Assignment outside of section. Ignoring.");
+ 
+@@ -247,10 +246,9 @@ static int parse_line(
+         }
+ 
+         e = strchr(l, '=');
+-        if (!e) {
+-                log_syntax(unit, LOG_WARNING, filename, line, 0, "Missing '='.");
+-                return -EINVAL;
+-        }
++        if (!e)
++                return log_syntax(unit, LOG_WARNING, filename, line, 0,
++                                  "Missing '=', ignoring line.");
+ 
+         *e = 0;
+         e++;
+-- 
+2.25.1
+
diff --git a/SPECS/systemd/shared-conf-parser-emit-a-nicer-warning-for-somethin.patch b/SPECS/systemd/shared-conf-parser-emit-a-nicer-warning-for-somethin.patch
new file mode 100644
index 00000000..236becc1
--- /dev/null
+++ b/SPECS/systemd/shared-conf-parser-emit-a-nicer-warning-for-somethin.patch
@@ -0,0 +1,32 @@
+From 8be8ed8ce1ed30450b6caf6e7dcf6dd28080e1f6 Mon Sep 17 00:00:00 2001
+From: =?UTF-8?q?Zbigniew=20J=C4=99drzejewski-Szmek?= <zbyszek@in.waw.pl>
+Date: Thu, 18 Jul 2019 11:30:43 +0200
+Subject: [PATCH 2/2] shared/conf-parser: emit a nicer warning for something
+ like "======"
+
+Urlich Windl wrote on the mailing list:
+> I noticed that a line of "=======" in "[Service]" cases the message " Unknown lvalue '' in section 'Service'".
+
+This now becomes:
+/etc/systemd/system/eqeqeqeq.service:3: Missing key name before '=', ignoring line.
+---
+ src/shared/conf-parser.c | 3 +++
+ 1 file changed, 3 insertions(+)
+
+diff --git a/src/shared/conf-parser.c b/src/shared/conf-parser.c
+index c3af230870..b4ebc0f44b 100644
+--- a/src/shared/conf-parser.c
++++ b/src/shared/conf-parser.c
+@@ -249,6 +249,9 @@ static int parse_line(
+         if (!e)
+                 return log_syntax(unit, LOG_WARNING, filename, line, 0,
+                                   "Missing '=', ignoring line.");
++        if (e == l)
++                return log_syntax(unit, LOG_WARNING, filename, line, 0,
++                                  "Missing key name before '=', ignoring line.");
+ 
+         *e = 0;
+         e++;
+-- 
+2.25.1
+
diff --git a/SPECS/systemd/systemd-239-bz-2361840-sysctl-ipv6-disabled.patch b/SPECS/systemd/systemd-239-bz-2361840-sysctl-ipv6-disabled.patch
deleted file mode 100644
index 8c595384..00000000
--- a/SPECS/systemd/systemd-239-bz-2361840-sysctl-ipv6-disabled.patch
+++ /dev/null
@@ -1,247 +0,0 @@
-diff -rupN systemd-239-orig/src/network/networkd-address.c systemd-239/src/network/networkd-address.c
---- systemd-239-orig/src/network/networkd-address.c	2019-06-25 19:58:15.776677784 +0530
-+++ systemd-239/src/network/networkd-address.c	2019-06-25 19:58:09.981468443 +0530
-@@ -540,6 +540,11 @@ int address_configure(
-         assert(link->manager);
-         assert(link->manager->rtnl);
- 
-+        if (address->family == AF_INET6 && link_sysctl_ipv6_enabled(link) == 0) {
-+                log_link_warning(link, "An IPv6 address is requested, but IPv6 is disabled by sysctl, ignoring.");
-+                return 0;
-+        }
-+
-         /* If this is a new address, then refuse adding more than the limit */
-         if (address_get(link, address->family, &address->in_addr, address->prefixlen, NULL) <= 0 &&
-             set_size(link->addresses) >= ADDRESSES_PER_LINK_MAX)
-@@ -646,7 +651,7 @@ int address_configure(
-                 return log_error_errno(r, "Could not add address: %m");
-         }
- 
--        return 0;
-+        return 1;
- }
- 
- int config_parse_broadcast(
-diff -rupN systemd-239-orig/src/network/networkd-link.c systemd-239/src/network/networkd-link.c
---- systemd-239-orig/src/network/networkd-link.c	2019-06-25 19:58:15.899673359 +0530
-+++ systemd-239/src/network/networkd-link.c	2019-06-25 19:58:10.071472495 +0530
-@@ -24,6 +24,7 @@
- #include "socket-util.h"
- #include "stdio-util.h"
- #include "string-table.h"
-+#include "sysctl-util.h"
- #include "udev-util.h"
- #include "util.h"
- #include "virt.h"
-@@ -40,6 +41,9 @@ static bool link_dhcp6_enabled(Link *lin
-         if (!link->network)
-                 return false;
- 
-+        if (link_sysctl_ipv6_enabled(link) == 0)
-+                return false;
-+
-         return link->network->dhcp & ADDRESS_FAMILY_IPV6;
- }
- 
-@@ -97,6 +101,9 @@ static bool link_ipv6ll_enabled(Link *li
-         if (streq_ptr(link->kind, "wireguard"))
-                 return false;
- 
-+        if (link_sysctl_ipv6_enabled(link) == 0)
-+                return false;
-+
-         return link->network->link_local & ADDRESS_FAMILY_IPV6;
- }
- 
-@@ -109,10 +116,27 @@ static bool link_ipv6_enabled(Link *link
-         if (link->network->bridge)
-                 return false;
- 
-+        if (link_sysctl_ipv6_enabled(link) == 0)
-+                return false;
-+
-         /* DHCPv6 client will not be started if no IPv6 link-local address is configured. */
-         return link_ipv6ll_enabled(link) || network_has_static_ipv6_addresses(link->network);
- }
- 
-+int link_sysctl_ipv6_enabled(Link *link) {
-+        _cleanup_free_ char *value = NULL;
-+        int r;
-+
-+        r = sysctl_read_ip_property(AF_INET6, link->ifname, "disable_ipv6", &value);
-+        if (r < 0)
-+                return log_link_warning_errno(link, r,
-+                                              "Failed to read net.ipv6.conf.%s.disable_ipv6 sysctl property: %m",
-+                                              link->ifname);
-+
-+        link->sysctl_ipv6_enabled = value[0] == '0';
-+        return link->sysctl_ipv6_enabled;
-+}
-+
- static bool link_radv_enabled(Link *link) {
-         assert(link);
- 
-@@ -188,6 +212,9 @@ static bool link_ipv6_forward_enabled(Li
-         if (link->network->ip_forward == _ADDRESS_FAMILY_BOOLEAN_INVALID)
-                 return false;
- 
-+        if (link_sysctl_ipv6_enabled(link) == 0)
-+                return false;
-+
-         return link->network->ip_forward & ADDRESS_FAMILY_IPV6;
- }
- 
-@@ -450,6 +477,7 @@ static int link_new(Manager *manager, sd
-         link->rtnl_extended_attrs = true;
-         link->ifindex = ifindex;
-         link->iftype = iftype;
-+        link->sysctl_ipv6_enabled = -1;
-         link->ifname = strdup(ifname);
-         if (!link->ifname)
-                 return -ENOMEM;
-@@ -795,7 +823,8 @@ static int link_set_routing_policy_rule(
-                         return r;
-                 }
- 
--                link->routing_policy_rule_messages++;
-+                if (r > 0)
-+                        link->routing_policy_rule_messages++;
-         }
- 
-         routing_policy_rule_purge(link->manager, link);
-@@ -855,7 +884,8 @@ static int link_enter_set_routes(Link *l
-                         return r;
-                 }
- 
--                link->route_messages++;
-+                if (r > 0)
-+                        link->route_messages++;
-         }
- 
-         if (link->route_messages == 0) {
-@@ -1077,7 +1107,8 @@ static int link_enter_set_addresses(Link
-                         return r;
-                 }
- 
--                link->address_messages++;
-+                if (r > 0)
-+                        link->address_messages++;
-         }
- 
-         LIST_FOREACH(labels, label, link->network->address_labels) {
-diff -rupN systemd-239-orig/src/network/networkd-link.h systemd-239/src/network/networkd-link.h
---- systemd-239-orig/src/network/networkd-link.h	2019-06-25 19:58:15.873674294 +0530
-+++ systemd-239/src/network/networkd-link.h	2019-06-25 19:58:10.043470841 +0530
-@@ -124,6 +124,8 @@ typedef struct Link {
- 
-         Hashmap *bound_by_links;
-         Hashmap *bound_to_links;
-+
-+	int sysctl_ipv6_enabled;
- } Link;
- 
- Link *link_unref(Link *link);
-@@ -163,6 +165,8 @@ int dhcp4_set_promote_secondaries(Link *
- int dhcp6_configure(Link *link);
- int dhcp6_request_address(Link *link, int ir);
- 
-+int link_sysctl_ipv6_enabled(Link *link);
-+
- const char* link_state_to_string(LinkState s) _const_;
- LinkState link_state_from_string(const char *s) _pure_;
- 
-diff -rupN systemd-239-orig/src/network/networkd-route.c systemd-239/src/network/networkd-route.c
---- systemd-239-orig/src/network/networkd-route.c	2019-06-25 19:58:15.848675194 +0530
-+++ systemd-239/src/network/networkd-route.c	2019-06-25 20:02:57.522231886 +0530
-@@ -502,6 +502,11 @@ int route_configure(
-         assert(link->ifindex > 0);
-         assert(IN_SET(route->family, AF_INET, AF_INET6));
- 
-+        if (route->family == AF_INET6 && link_sysctl_ipv6_enabled(link) == 0) {
-+                log_link_warning(link, "An IPv6 route is requested, but IPv6 is disabled by sysctl, ignoring.");
-+                return 0;
-+        }
-+
-         if (route_get(link, route->family, &route->dst, route->dst_prefixlen, route->tos, route->priority, route->table, NULL) <= 0 &&
-             set_size(link->routes) >= routes_max())
-                 return -E2BIG;
-@@ -667,7 +672,7 @@ int route_configure(
-         sd_event_source_unref(route->expire);
-         route->expire = TAKE_PTR(expire);
- 
--        return 0;
-+        return 1;
- }
- 
- int config_parse_gateway(
-diff -rupN systemd-239-orig/src/network/networkd-routing-policy-rule.c systemd-239/src/network/networkd-routing-policy-rule.c
---- systemd-239-orig/src/network/networkd-routing-policy-rule.c	2019-06-25 19:58:15.890673682 +0530
-+++ systemd-239/src/network/networkd-routing-policy-rule.c	2019-06-25 20:02:31.471228196 +0530
-@@ -451,6 +451,11 @@ int routing_policy_rule_configure(Routin
-         assert(link->manager);
-         assert(link->manager->rtnl);
- 
-+	if (rule->family == AF_INET6 && link_sysctl_ipv6_enabled(link) == 0) {
-+                log_link_warning(link, "An IPv6 routing policy rule is requested, but IPv6 is disabled by sysctl, ignoring.");
-+                return 0;
-+        }
-+
-         r = sd_rtnl_message_new_routing_policy_rule(link->manager->rtnl, &m, RTM_NEWRULE, rule->family);
-         if (r < 0)
-                 return log_error_errno(r, "Could not allocate RTM_NEWRULE message: %m");
-@@ -544,7 +549,7 @@ int routing_policy_rule_configure(Routin
-         if (r < 0)
-                 return log_error_errno(r, "Could not add rule : %m");
- 
--        return 0;
-+        return 1;
- }
- 
- static int parse_fwmark_fwmask(const char *s, uint32_t *fwmark, uint32_t *fwmask) {
-diff -rupN systemd-239-orig/src/shared/sysctl-util.c systemd-239/src/shared/sysctl-util.c
---- systemd-239-orig/src/shared/sysctl-util.c	2019-06-25 19:58:16.274659445 +0530
-+++ systemd-239/src/shared/sysctl-util.c	2019-06-25 19:58:10.412492632 +0530
-@@ -6,6 +6,7 @@
- #include <string.h>
- #include <unistd.h>
- 
-+#include "alloc-util.h"
- #include "fd-util.h"
- #include "fileio.h"
- #include "log.h"
-@@ -69,3 +70,26 @@ int sysctl_read(const char *property, ch
-         p = strjoina("/proc/sys/", property);
-         return read_full_file(p, content, NULL);
- }
-+
-+int sysctl_read_ip_property(int af, const char *ifname, const char *property, char **ret) {
-+        _cleanup_free_ char *value = NULL;
-+        const char *p;
-+        int r;
-+
-+        assert(IN_SET(af, AF_INET, AF_INET6));
-+        assert(property);
-+
-+        p = strjoina("/proc/sys/net/ipv", af == AF_INET ? "4" : "6",
-+                     ifname ? "/conf/" : "", strempty(ifname),
-+                     property[0] == '/' ? "" : "/", property);
-+
-+        r = read_one_line_file(p, &value);
-+        if (r < 0)
-+                return r;
-+
-+        if (ret)
-+                *ret = TAKE_PTR(value);
-+
-+        return r;
-+}
-+
-diff -rupN systemd-239-orig/src/shared/sysctl-util.h systemd-239/src/shared/sysctl-util.h
---- systemd-239-orig/src/shared/sysctl-util.h	2019-06-25 19:58:16.328657420 +0530
-+++ systemd-239/src/shared/sysctl-util.h	2019-06-25 19:58:10.480496648 +0530
-@@ -4,4 +4,4 @@
- char *sysctl_normalize(char *s);
- int sysctl_read(const char *property, char **value);
- int sysctl_write(const char *property, const char *value);
--
-+int sysctl_read_ip_property(int af, const char *ifname, const char *property, char **ret);
diff --git a/SPECS/systemd/systemd-239-bz-2527177.patch b/SPECS/systemd/systemd-239-bz-2527177.patch
new file mode 100644
index 00000000..ed8b612c
--- /dev/null
+++ b/SPECS/systemd/systemd-239-bz-2527177.patch
@@ -0,0 +1,209 @@
+diff -rupN systemd-239/src/network/networkd-link.c systemd-239-bz-2527177/src/network/networkd-link.c
+--- systemd-239/src/network/networkd-link.c	2020-03-14 07:51:45.000000000 +0530
++++ systemd-239-bz-2527177/src/network/networkd-link.c	2020-03-17 09:50:27.887996584 +0530
+@@ -630,7 +630,7 @@ int link_get(Manager *m, int ifindex, Li
+         return 0;
+ }
+ 
+-static void link_set_state(Link *link, LinkState state) {
++void link_set_state(Link *link, LinkState state) {
+         assert(link);
+ 
+         if (link->state == state)
+@@ -740,7 +740,7 @@ static void link_enter_configured(Link *
+         assert(link);
+         assert(link->network);
+ 
+-        if (link->state != LINK_STATE_SETTING_ROUTES)
++        if (link->state != LINK_STATE_CONFIGURING)
+                 return;
+ 
+         log_link_info(link, "Configured");
+@@ -842,8 +842,7 @@ static int route_handler(sd_netlink *rtn
+         int r;
+ 
+         assert(link->route_messages > 0);
+-        assert(IN_SET(link->state, LINK_STATE_SETTING_ADDRESSES,
+-                      LINK_STATE_SETTING_ROUTES, LINK_STATE_FAILED,
++        assert(IN_SET(link->state, LINK_STATE_CONFIGURING, LINK_STATE_FAILED,
+                       LINK_STATE_LINGER));
+ 
+         link->route_messages--;
+@@ -870,12 +869,10 @@ static int link_enter_set_routes(Link *l
+ 
+         assert(link);
+         assert(link->network);
+-        assert(link->state == LINK_STATE_SETTING_ADDRESSES);
++        assert(link->state != _LINK_STATE_INVALID);
+ 
+         (void) link_set_routing_policy_rule(link);
+ 
+-        link_set_state(link, LINK_STATE_SETTING_ROUTES);
+-
+         LIST_FOREACH(routes, rt, link->network->static_routes) {
+                 r = route_configure(rt, link, route_handler);
+                 if (r < 0) {
+@@ -905,7 +902,7 @@ int link_route_remove_handler(sd_netlink
+         assert(link);
+         assert(link->ifname);
+ 
+-        if (IN_SET(link->state, LINK_STATE_FAILED, LINK_STATE_LINGER))
++        if (IN_SET(link->state, LINK_STATE_CONFIGURING, LINK_STATE_FAILED, LINK_STATE_LINGER))
+                 return 1;
+ 
+         r = sd_netlink_message_get_errno(m);
+@@ -924,7 +921,7 @@ static int address_handler(sd_netlink *r
+         assert(link);
+         assert(link->ifname);
+         assert(link->address_messages > 0);
+-        assert(IN_SET(link->state, LINK_STATE_SETTING_ADDRESSES,
++        assert(IN_SET(link->state, LINK_STATE_CONFIGURING,
+                LINK_STATE_FAILED, LINK_STATE_LINGER));
+ 
+         link->address_messages--;
+@@ -1097,8 +1094,6 @@ static int link_enter_set_addresses(Link
+         if (r < 0)
+                 return r;
+ 
+-        link_set_state(link, LINK_STATE_SETTING_ADDRESSES);
+-
+         LIST_FOREACH(addresses, ad, link->network->static_addresses) {
+                 r = address_configure(ad, link, address_handler, false);
+                 if (r < 0) {
+@@ -2381,11 +2376,12 @@ static int link_enter_join_netdev(Link *
+ 
+         assert(link);
+         assert(link->network);
+-        assert(link->state == LINK_STATE_PENDING);
++        assert(link->state == LINK_STATE_INITIALIZED);
+ 
+-        link_set_state(link, LINK_STATE_ENSLAVING);
++        link_set_state(link, LINK_STATE_CONFIGURING);
+ 
+         link_dirty(link);
++        link->enslaving = 0;
+ 
+         if (!link->network->bridge &&
+             !link->network->bond &&
+@@ -2770,7 +2766,7 @@ static int link_configure(Link *link) {
+ 
+         assert(link);
+         assert(link->network);
+-        assert(link->state == LINK_STATE_PENDING);
++        assert(link->state == LINK_STATE_INITIALIZED);
+ 
+         if (STRPTR_IN_SET(link->kind, "can", "vcan"))
+                 return link_configure_can(link);
+@@ -2920,10 +2916,13 @@ static int link_initialized_and_synced(s
+         assert(link->ifname);
+         assert(link->manager);
+ 
+-        if (link->state != LINK_STATE_PENDING)
++        /* We may get called either from the asynchronous netlink callback,
++         * or directly for link_add() if running in a container. See link_add(). */
++        if (!IN_SET(link->state, LINK_STATE_PENDING, LINK_STATE_INITIALIZED))
+                 return 1;
+ 
+         log_link_debug(link, "Link state is up-to-date");
++        link_set_state(link, LINK_STATE_INITIALIZED);
+ 
+         r = link_new_bound_by_list(link);
+         if (r < 0)
+@@ -2988,6 +2987,7 @@ int link_initialized(Link *link, struct
+                 return 0;
+ 
+         log_link_debug(link, "udev initialized link");
++        link_set_state(link, LINK_STATE_INITIALIZED);
+ 
+         link->udev_device = udev_device_ref(device);
+ 
+@@ -3267,7 +3267,7 @@ int link_ipv6ll_gained(Link *link, const
+         link->ipv6ll_address = *address;
+         link_check_ready(link);
+ 
+-        if (!IN_SET(link->state, LINK_STATE_PENDING, LINK_STATE_UNMANAGED, LINK_STATE_FAILED)) {
++        if (IN_SET(link->state, LINK_STATE_CONFIGURING, LINK_STATE_CONFIGURED)) {
+                 r = link_acquire_ipv6_conf(link);
+                 if (r < 0) {
+                         link_enter_failed(link);
+@@ -3283,13 +3283,14 @@ static int link_carrier_gained(Link *lin
+ 
+         assert(link);
+ 
+-        if (!IN_SET(link->state, LINK_STATE_PENDING, LINK_STATE_UNMANAGED, LINK_STATE_FAILED)) {
++        if (IN_SET(link->state, LINK_STATE_CONFIGURING, LINK_STATE_CONFIGURED)) {
+                 r = link_acquire_conf(link);
+                 if (r < 0) {
+                         link_enter_failed(link);
+                         return r;
+                 }
+ 
++                link_set_state(link, LINK_STATE_CONFIGURING);
+                 r = link_enter_set_addresses(link);
+                 if (r < 0)
+                         return r;
+@@ -3374,7 +3375,7 @@ int link_update(Link *link, sd_netlink_m
+         if (link->state == LINK_STATE_LINGER) {
+                 link_ref(link);
+                 log_link_info(link, "Link readded");
+-                link_set_state(link, LINK_STATE_ENSLAVING);
++                link_set_state(link, LINK_STATE_CONFIGURING);
+ 
+                 r = link_new_carrier_maps(link);
+                 if (r < 0)
+@@ -3962,14 +3963,11 @@ void link_clean(Link *link) {
+ }
+ 
+ static const char* const link_state_table[_LINK_STATE_MAX] = {
+-        [LINK_STATE_PENDING] = "pending",
+-        [LINK_STATE_ENSLAVING] = "configuring",
+-        [LINK_STATE_SETTING_ADDRESSES] = "configuring",
+-        [LINK_STATE_SETTING_ROUTES] = "configuring",
+-        [LINK_STATE_CONFIGURED] = "configured",
+-        [LINK_STATE_UNMANAGED] = "unmanaged",
+-        [LINK_STATE_FAILED] = "failed",
+-        [LINK_STATE_LINGER] = "linger",
++         [LINK_STATE_PENDING] = "pending",
++         [LINK_STATE_INITIALIZED] = "initialized",
++         [LINK_STATE_CONFIGURING] = "configuring",
++         [LINK_STATE_CONFIGURED] = "configured",
++         [LINK_STATE_UNMANAGED] = "unmanaged",
+ };
+ 
+ DEFINE_STRING_TABLE_LOOKUP(link_state, LinkState);
+diff -rupN systemd-239/src/network/networkd-link.h systemd-239-bz-2527177/src/network/networkd-link.h
+--- systemd-239/src/network/networkd-link.h	2020-03-14 07:51:45.000000000 +0530
++++ systemd-239-bz-2527177/src/network/networkd-link.h	2020-03-14 08:26:43.401723149 +0530
+@@ -18,15 +18,14 @@
+ #include "set.h"
+ 
+ typedef enum LinkState {
+-        LINK_STATE_PENDING,
+-        LINK_STATE_ENSLAVING,
+-        LINK_STATE_SETTING_ADDRESSES,
+-        LINK_STATE_SETTING_ROUTES,
+-        LINK_STATE_CONFIGURED,
+-        LINK_STATE_UNMANAGED,
+-        LINK_STATE_FAILED,
+-        LINK_STATE_LINGER,
+-        _LINK_STATE_MAX,
++        LINK_STATE_PENDING,     /* udev has not initialized the link */
++        LINK_STATE_INITIALIZED, /* udev has initialized the link */
++        LINK_STATE_CONFIGURING, /* configuring addresses, routes, etc. */
++        LINK_STATE_CONFIGURED,  /* everything is configured */
++        LINK_STATE_UNMANAGED,   /* Unmanaged=yes is set */
++        LINK_STATE_FAILED,      /* at least one configuration process failed */
++        LINK_STATE_LINGER,      /* RTM_DELLINK for the link has been received */
++       _LINK_STATE_MAX,
+         _LINK_STATE_INVALID = -1
+ } LinkState;
+ 
+@@ -143,6 +142,7 @@ int link_route_remove_handler(sd_netlink
+ void link_enter_failed(Link *link);
+ int link_initialized(Link *link, struct udev_device *device);
+ 
++void link_set_state(Link *link, LinkState state);
+ void link_check_ready(Link *link);
+ 
+ void link_update_operstate(Link *link);
+Binary files systemd-239/src/network/.networkd-ndisc.c.swp and systemd-239-bz-2527177/src/network/.networkd-ndisc.c.swp differ
diff --git a/SPECS/systemd/systemd.spec b/SPECS/systemd/systemd.spec
index ace097ae..866b7b1b 100644
--- a/SPECS/systemd/systemd.spec
+++ b/SPECS/systemd/systemd.spec
@@ -1,7 +1,7 @@
 Summary:          Systemd-239
 Name:             systemd
 Version:          239
-Release:          18%{?dist}
+Release:          19%{?dist}
 License:          LGPLv2+ and GPLv2+ and MIT
 URL:              http://www.freedesktop.org/wiki/Software/systemd/
 Group:            System Environment/Security
@@ -32,11 +32,13 @@ Patch12:          systemd-239-CVE-2018-16866.patch
 Patch13:          systemd-239-CVE-2019-3842.patch
 Patch14:          systemd-239-CVE-2019-6454.patch
 Patch15:          systemd-239-CVE-2019-3833-3844.patch
-Patch16:          systemd-239-bz-2361840-sysctl-ipv6-disabled.patch
 Patch17:          systemd-239-CVE-2019-15718.patch
 Patch18:          systemd-239-bz-2471962.patch
 Patch19:          systemd-239-issue-962.patch
 Patch20:          systemd-239-CVE-2019-20386.patch
+Patch21:          shared-conf-parser-be-nice-and-ignore-lines-without.patch
+Patch22:          shared-conf-parser-emit-a-nicer-warning-for-somethin.patch
+Patch23:          systemd-239-bz-2527177.patch
 
 Requires:         Linux-PAM
 Requires:         libcap
@@ -108,11 +110,13 @@ EOF
 %patch13 -p1
 %patch14 -p1
 %patch15 -p1
-%patch16 -p1
 %patch17 -p1
 %patch18 -p1
 %patch19 -p1
 %patch20 -p1
+%patch21 -p1
+%patch22 -p1
+%patch23 -p1
 
 sed -i "s#\#DefaultTasksMax=512#DefaultTasksMax=infinity#g" src/core/system.conf.in
 
@@ -279,6 +283,9 @@ rm -rf %{buildroot}/*
 %files lang -f %{name}.lang
 
 %changelog
+*    Thu Mar 12 2020 Susant Sahani <ssahani@vmware.com>  239-19
+-    Don't treat syntax error as fatal, fix bz 2527776 and drop
+-    patch 16 as upstream dropped it.
 *    Tue Feb 04 2020 Susant Sahani <ssahani@vmware.com>  239-18
 -    Fix CVE-2019-20386
 *    Thu  Jan 02 2020 Susant Sahani <ssahani@vmware.com>  239-17
-- 
2.25.1

