From 56be3619bc845d9fabc39001013f66321fe81439 Mon Sep 17 00:00:00 2001
From: Keerthana K <39941610+keerthanakalyan@users.noreply.github.com>
Date: Tue, 12 May 2020 10:28:43 +0530
Subject: [PATCH] Fix stale solv cache issue (#134)

This fix is to remove the old repomd , solv cache and lastrefresh
marker when there is a new repomd file downloaded. This fixes the issue
https://github.com/vmware/photon/issues/1008

Signed-off-by: Keerthana K <keerthanak@vmware.com>
---
diff --git a/client/prototypes.h b/client/prototypes.h
index 3161650..029534d 100644
--- a/client/prototypes.h
+++ b/client/prototypes.h
@@ -135,8 +135,7 @@ TDNFRemoveLastRefreshMarker(
 
 uint32_t
 TDNFRemoveTmpRepodata(
-    const char* pszTmpRepodataDir,
-    const char* pszTmpRepoMDFile
+    const char* pszTmpRepodataDir
     );
 
 uint32_t
diff --git a/client/repo.c b/client/repo.c
index af8fec7..1a8fe00 100644
--- a/client/repo.c
+++ b/client/repo.c
@@ -549,8 +549,9 @@ TDNFGetRepoMD(
         /* always download to tmp */
         dwError = TDNFAllocateStringPrintf(
                       &pszTmpRepoDataDir,
-                      "%s/tmp",
-                      pszRepoDataDir);
+                      "%s/%s/tmp",
+                      pTdnf->pConf->pszCacheDir,
+                      pRepoData->pszId);
         BAIL_ON_TDNF_ERROR(dwError);
 
         dwError = TDNFUtilsMakeDirs(pszTmpRepoDataDir);
@@ -603,9 +604,17 @@ TDNFGetRepoMD(
 
         if (nReplaceRepoMD)
         {
+            /* Remove the old repodata, solvcache and lastRefreshMarker before replacing the new repomd file and metalink files. */
+            TDNFRepoRemoveCache(pTdnf, pRepoData->pszId);
+            TDNFRemoveSolvCache(pTdnf, pRepoData->pszId);
+            TDNFRemoveLastRefreshMarker(pTdnf, pRepoData->pszId);
+            dwError = TDNFUtilsMakeDirs(pszRepoDataDir);
+            BAIL_ON_TDNF_ERROR(dwError);
             dwError = TDNFReplaceRepoMDFile(pszTmpRepoMDFile, pszRepoMDFile);
             BAIL_ON_TDNF_ERROR(dwError);
         }
+        dwError = TDNFRemoveTmpRepodata(pszTmpRepoDataDir);
+        BAIL_ON_TDNF_ERROR(dwError);
     }
 
     dwError = TDNFParseRepoMD(pRepoMDRel);
@@ -622,7 +631,6 @@ TDNFGetRepoMD(
 
 cleanup:
     TDNFFreeRepoMetadata(pRepoMDRel);
-    TDNFRemoveTmpRepodata(pszTmpRepoDataDir, pszTmpRepoMDFile);
     TDNF_SAFE_FREE_MEMORY(pszTmpRepoMDFile);
     TDNF_SAFE_FREE_MEMORY(pszTmpRepoDataDir);
     TDNF_SAFE_FREE_MEMORY(pszRepoMDFile);
@@ -937,7 +945,7 @@ TDNFReplaceRepoMDFile(
 {
     uint32_t dwError = 0;
 
-    if (IsNullOrEmptyString(pszSrcFile) || IsNullOrEmptyString(pszDstFile))
+    if (IsNullOrEmptyString(pszSrcFile) || IsNullOrEmptyString(pszDstFile) || access(pszSrcFile, F_OK))
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_ERROR(dwError);
diff --git a/client/repoutils.c b/client/repoutils.c
index f3a4b11..5268d10 100644
--- a/client/repoutils.c
+++ b/client/repoutils.c
@@ -278,22 +278,49 @@ error:
 
 uint32_t
 TDNFRemoveTmpRepodata(
-    const char* pszTmpRepodataDir,
-    const char* pszTmpRepoMDFile
+    const char* pszTmpRepodataDir
     )
 {
     uint32_t dwError = 0;
+    char* pszFilePath = NULL;
+    DIR *pDir = NULL;
+    struct dirent *pEnt = NULL;
 
-    if (IsNullOrEmptyString(pszTmpRepodataDir) || IsNullOrEmptyString(pszTmpRepoMDFile))
+    if (IsNullOrEmptyString(pszTmpRepodataDir))
     {
         dwError = ERROR_TDNF_INVALID_PARAMETER;
         BAIL_ON_TDNF_ERROR(dwError);
     }
-    if (unlink(pszTmpRepoMDFile))
+    pDir = opendir(pszTmpRepodataDir);
+    if(pDir == NULL)
     {
-        if (errno != ENOENT)
+        dwError = errno;
+        BAIL_ON_TDNF_SYSTEM_ERROR(dwError);
+    }
+    while ((pEnt = readdir (pDir)) != NULL )
+    {
+        if (!strcmp(pEnt->d_name, ".") || !strcmp(pEnt->d_name, ".."))
+        {
+            continue;
+        }
+        dwError = TDNFAllocateStringPrintf(
+                    &pszFilePath,
+                    "%s/%s",
+                    pszTmpRepodataDir,
+                    pEnt->d_name);
+        if(pszFilePath)
         {
-            dwError = errno;
+            if(unlink(pszFilePath))
+            {
+                dwError = errno;
+                BAIL_ON_TDNF_SYSTEM_ERROR(dwError);
+            }
+            TDNF_SAFE_FREE_MEMORY(pszFilePath);
+            pszFilePath = NULL;
+        }
+        else
+        {
+            dwError = ERROR_TDNF_INVALID_PARAMETER;
             BAIL_ON_TDNF_ERROR(dwError);
         }
     }
